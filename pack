#!/bin/bash

cache_dir="/home/$USER/.cache/pack"
cache_file="$cache_dir/cache"
fzf_menu="fzf --disabled --cycle --no-info --reverse --margin 1% --padding 5% --border=bold"

# check if paru or yay installed
check-aur-helper() {
  if [ -f /bin/paru ]; then
    helper="paru"
  elif [ -f /bin/yay ]; then
    helper="yay"
  else
    echo "No AUR helper was found. Install yay or paru first."
    exit 1
  fi
}

check-aur-cache() {
  ttl=432000

  if [ ! -d $cache_dir ]; then
    mkdir -p $cache_dir
  fi

  if [ ! -f "$cache_file" ] || [ $(($(date +%s) - $(stat -c %Y "$cache_file"))) -gt $ttl ]; then
    create-aur-cache
  fi
}

create-aur-cache() {
  echo "Creating cache..."
  echo "TIP: If AUR is down, you can create cache without AUR packages from Advanced Options."
  ${helper} -Slq >"$cache_file.tmp" && mv "$cache_file.tmp" "$cache_file"
  echo "Successfully created cache."
}

create-pacman-cache() {
  echo "This method is recommended only if AUR is not available."
  echo "If AUR is available, use the other method to regenerate the cache."
  while true; do
    read -p "Do you want to continue? (Y/n): " -r choice
    choice=${choice,,}

    case "$choice" in
    "" | y | yes)
      break
      ;;
    n | no)
      echo "Aborted. Going back."
      cache-regen-selector
      ;;
    *)
      echo "Please enter a valid input."
      ;;
    esac
  done

  echo
  echo "Enter your sudo password to run pacman command."
  echo
  sudo pacman -Slq >"$cache_file.tmp" && mv "$cache_file.tmp" "$cache_file"
  echo "Successfully created cache from pacman."
}

cache-regen-selector() {
  choice=$(printf "Create Cache (Recommended)\nCreate Cache without AUR\nGo Back" | ${fzf_menu})
  case $choice in
  "Create Cache (Recommended)")
    create-aur-cache
    cache-regen-selector
    ;;
  "Create Cache without AUR")
    create-pacman-cache
    cache-regen-selector
    ;;
  "Go Back")
    launch-adv-options
    ;;
  *)
    launch-adv-options
    ;;
  esac
}

regen-pack-cache() {
  cache-regen-selector
  launch-adv-options
}

pack-install() {
  fzf_args=(
    --multi
    --preview "echo 'alt-p: toggle description, alt-j/k: scroll, F11: maximize'; echo; ${helper} -Sii {1}"
    --preview-window 'right:50%:wrap:border-bold'
    --bind 'alt-p:toggle-preview'
    --bind 'alt-d:preview-half-page-down,alt-u:preview-half-page-up'
    --bind 'alt-k:preview-up,alt-j:preview-down'
    --padding 2%
  )

  check-aur-cache

  pack_name=$(cat "${cache_file}" | fzf "${fzf_args[@]}" | tr '\n' ' ')

  if [[ -n $pack_name ]]; then
    ${helper} -S $pack_name
  fi
}

pack-uninstall() {
  fzf_args=(
    --multi
    --preview "echo 'alt-p: toggle description, alt-j/k: scroll, F11: maximize'; echo; ${helper} -Qi {1}"
    --preview-window 'right:50%:wrap:border-bold'
    --bind 'alt-p:toggle-preview'
    --bind 'alt-d:preview-half-page-down,alt-u:preview-half-page-up'
    --bind 'alt-k:preview-up,alt-j:preview-down'
    --padding 2%
  )

  pack_name=$(${helper} -Qqe | fzf "${fzf_args[@]}" | tr '\n' ' ')

  if [[ -n $pack_name ]]; then
    ${helper} -Rns $pack_name
  fi
}

pack-update() {
  echo -e "Updating system packages..."
  $helper -Syu
  echo
}

pack-clear-helper-cache() {
  $helper -Scc
  echo
}

pack-list-aur() {
  fzf_args=(
    --multi
    --preview "echo 'alt-p: toggle description, alt-j/k: scroll, F11: maximize'; echo; ${helper} -Qi {1}"
    --preview-window 'right:50%:wrap:border-bold'
    --bind 'alt-p:toggle-preview'
    --bind 'alt-d:preview-half-page-down,alt-u:preview-half-page-up'
    --bind 'alt-k:preview-up,alt-j:preview-down'
    --padding 2%
  )

  pack_name=$(${helper} -Qqm | fzf "${fzf_args[@]}" | tr '\n' ' ')

  if [[ -n $pack_name ]]; then
    ${helper} -Rns $pack_name
  fi
}

pack-list-installed() {
  choice=$(printf "List All Installed Packages\nOnly List Installed AUR Packages\nGo Back" | fzf --disabled --cycle --no-info --reverse --margin 1% --padding 5% --border=bold)
  case $choice in
  "List All Installed Packages")
    pack-uninstall
    pack-list-installed
    ;;
  "Only List Installed AUR Packages")
    pack-list-aur
    pack-list-installed
    ;;
  "Go Back")
    pack-menu
    ;;
  *)
    pack-menu
    ;;
  esac
}

pack-menu() {
  choice=$(printf "Install Packages\nRemove Packages\nUpdate System\nAdvanced Options\nExit" | ${fzf_menu})
  case $choice in
  "Install Packages")
    pack-install
    pack-menu
    ;;
  "Remove Packages")
    pack-list-installed
    pack-menu
    ;;
  "Update System")
    pack-update
    pack-menu
    ;;
  "Advanced Options")
    launch-adv-options
    pack-menu
    ;;
  "Exit")
    exit 0
    ;;
  *)
    exit 1
    ;;
  esac
}

launch-adv-options() {
  choice_adv=$(printf "Clear Helper Cache\nRegenerate Pack Cache\nGo Back" | ${fzf_menu})
  case $choice_adv in
  "Clear Helper Cache")
    pack-clear-helper-cache
    launch-adv-options
    ;;
  "Regenerate Pack Cache")
    regen-pack-cache
    ;;
  "Go Back")
    pack-menu
    ;;
  esac
}

check-aur-helper

case $1 in

install)
  pack-install
  ;;
remove)
  pack-uninstall
  ;;
uninstall)
  pack-uninstall
  ;;
update)
  pack-update
  ;;
*)
  pack-menu
  ;;
esac
